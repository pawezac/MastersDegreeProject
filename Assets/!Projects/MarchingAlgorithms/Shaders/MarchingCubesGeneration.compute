#pragma kernel MarchingCubesGeneration
#pragma kernel UpdateWeights

#include "Includes\MarchingCubesTable.hlsl"
#include "Includes\MarchingTetrahedrasTable.hlsl"
#include "Includes\MetricsCompute.hlsl"

struct Triangle
{
	float3 a;
	float3 b;
	float3 c;
};

RWStructuredBuffer<float> _Weights;
AppendStructuredBuffer<Triangle> _Triangles;

float3 _HitPosition;
float _BrushSize;
float _TerraformStrength;
float _LodScaleFactor;
float _IsoLevel;
int _LODSize;

float3 interp(float3 edgeVertex1, float valueAtVertex1, float3 edgeVertex2, float valueAtVertex2)
{
    return (edgeVertex1 + (_IsoLevel - valueAtVertex1) * (edgeVertex2 - edgeVertex1)  / (valueAtVertex2 - valueAtVertex1));
}

[numthreads(numOfThreads, numOfThreads, numOfThreads)]
void MarchingCubesGeneration(uint3 id : SV_DispatchThreadID)
{
	// cause we dont want to go outside of bounds
	if (id.x >= _LODSize - 1 || id.y >= _LODSize - 1 || id.z >= _LODSize - 1)
    {
        return;
    }

    float3 samplePos = id * _LodScaleFactor;
    float unit = 1 * _LodScaleFactor;


	float cubeValues[8] = {
       _Weights[indexFromCoord(samplePos.x, samplePos.y, samplePos.z + unit)],
       _Weights[indexFromCoord(samplePos.x + unit, samplePos.y, samplePos.z + unit)],
       _Weights[indexFromCoord(samplePos.x + unit, samplePos.y, samplePos.z)],
       _Weights[indexFromCoord(samplePos.x, samplePos.y, samplePos.z)],
       _Weights[indexFromCoord(samplePos.x, samplePos.y + unit, samplePos.z + unit)],
       _Weights[indexFromCoord(samplePos.x + unit, samplePos.y + unit, samplePos.z + unit)],
       _Weights[indexFromCoord(samplePos.x + unit, samplePos.y + unit, samplePos.z)],
       _Weights[indexFromCoord(samplePos.x, samplePos.y + unit, samplePos.z)]
    };

    int cubeIndex = 0;
    if (cubeValues[0] < _IsoLevel) cubeIndex |= 1;
    if (cubeValues[1] < _IsoLevel) cubeIndex |= 2;
    if (cubeValues[2] < _IsoLevel) cubeIndex |= 4;
    if (cubeValues[3] < _IsoLevel) cubeIndex |= 8;
    if (cubeValues[4] < _IsoLevel) cubeIndex |= 16;
    if (cubeValues[5] < _IsoLevel) cubeIndex |= 32;
    if (cubeValues[6] < _IsoLevel) cubeIndex |= 64;
    if (cubeValues[7] < _IsoLevel) cubeIndex |= 128;

    //Get the triangle indexes.
    //Loop through them to find the edges.
    int edges[] = triTable[cubeIndex];

    for (int i = 0; edges[i] != -1; i += 3)
    {
        // First edge lies between vertex e00 and vertex e01
        int e00 = edgeConnections[edges[i]][0];
        int e01 = edgeConnections[edges[i]][1];

        // Second edge lies between vertex e10 and vertex e11
        int e10 = edgeConnections[edges[i + 1]][0];
        int e11 = edgeConnections[edges[i + 1]][1];
        
        // Third edge lies between vertex e20 and vertex e21
        int e20 = edgeConnections[edges[i + 2]][0];
        int e21 = edgeConnections[edges[i + 2]][1];

        //Interpolate between the points on the edge to find the exact position for the vertices of the triangles.
        Triangle tri;
        tri.a = (interp(cornerOffsets[e00], cubeValues[e00], cornerOffsets[e01], cubeValues[e01]) + id) / (_LODSize - 1) * _Scale;
        tri.b = (interp(cornerOffsets[e10], cubeValues[e10], cornerOffsets[e11], cubeValues[e11]) + id) / (_LODSize - 1) * _Scale;
        tri.c = (interp(cornerOffsets[e20], cubeValues[e20], cornerOffsets[e21], cubeValues[e21]) + id) / (_LODSize - 1) * _Scale;
        _Triangles.Append(tri);
    }

    //Why don't we just add the three vertices to the triangles list?
    //When working with compute shaders, we can never be sure in which order elements are added to our list. 
    //This is because threads work in parallel, so many threads could 
    //be adding vertices at the same time causing the list to not be in the right order.
}

[numthreads(numOfThreads, numOfThreads, numOfThreads)]
void UpdateWeights( uint3 id : SV_DispatchThreadID ) 
{
    //check if the id is actually within the valid chunk size range.
    if ( id.x >= _ChunkSize - 1 || id.y >= _ChunkSize - 1 || id.z >= _ChunkSize - 1 )
    {
        return;
    }

    if (distance((float3(id) / (_ChunkSize - 1) * _Scale), _HitPosition) <= _BrushSize)
    {
        _Weights[indexFromCoord(id.x, id.y, id.z)] += _TerraformStrength;
    }
}

